start cv1;
%IF %UPCASE(&METHOD)=FIXED_G or %UPCASE(&METHOD)=FIXED_BSQ or %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
	do i=1 to n;
%END;
*** Basic formulae for calculating spherical distance *** ;
d=j(1,3,0);
dist=d;
	do j=1 to n;
	%IF %UPCASE(&DISTANCEKM)=YES %THEN %DO;
		dif=abs(COORD[i,1]-COORD[j,1]);   
		raio=arcos(-1)/180;
		argument=sin(COORD[i,2]*raio)*sin(COORD[j,2]*raio)+cos(COORD[i,2]*raio)*cos(COORD[j,2]*raio)*cos(dif*raio);
		if argument>=1 then arco=0;
		else
		/* Law of Cosines */ 
		arco=arcos(sin(COORD[i,2]*raio)*sin(COORD[j,2]*raio)+cos(COORD[i,2]*raio)*cos(COORD[j,2]*raio)*cos(dif*raio));
		d1=arco*6371 /*Earth's Radius = 6371 (aproximately)*/;
		if d1<=1e-3 then d1=0;
	%END;
	%ELSE %DO;
		d1=sqrt((COORD[i,1]-COORD[j,1])**2+(COORD[i,2]-COORD[j,2])**2);
	%END;
%IF %UPCASE(&METHOD)=FIXED_G %THEN %DO;
		if d1 ^=0 then do;
%END;
%ELSE %IF %UPCASE(&METHOD)=FIXED_BSQ or %UPCASE(&METHOD)=ADAPTIVEN %THEN %DO;
		if d1<=h1 & d1 ^=0 then do;
%END;
%ELSE %IF %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
		if d1 ^=0 then do;
%END;
		d[1]=i; 
		d[2]=j;
	%IF %UPCASE(&DISTANCEKM)=YES %THEN %DO;
		d[3]=arco*6371 /*Earth's Radius = 6371 (approximately)*/;   
	%END;
	%ELSE %DO;
		d[3]=sqrt((COORD[i,1]-COORD[j,1])**2+(COORD[i,2]-COORD[j,2])**2);
	%END;
		dist=dist//d;
		end;
	end;
u=nrow(dist);
w=j(u,1,0);
x1=x[i,];
y1=y[i,];
wt1=wt[i,];
	do jj=2 to u;
		w[jj]=exp(-(dist[jj,3]/h1)**2);
%IF %UPCASE(&METHOD)=FIXED_BSQ or %UPCASE(&METHOD)=ADAPTIVEN %THEN %DO;
		w[jj]=(1-(dist[jj,3]/h1)**2)**2;
%END;
		x1=x1//x[dist[jj,2],];
		y1=y1//y[dist[jj,2],];
		wt1=wt1//wt[dist[jj,2],];
	end;
%IF %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
	x1=x[i,];
	y1=y[i,];
	wt1=wt[i,];
	call sort(dist,{3});
	dist=dist||(1:nrow(dist))`;
	w=j(n,2,0);	
	hn=dist[h1,3];
	do jj=2 to n;
		 if dist[jj,4]<=h1 then
		w[jj,1]=(1-(dist[jj,3]/hn)**2)**2;
		else w[jj,1]=0;
		w[jj,2]=dist[jj,2];
	end;
	position=w[loc(w[,1]>0),2];
	w={0}//w[position,1];
	x1=x1//x[position,];
	y1=y1//y[position,];
	wt1=wt1//wt[position,];
%END;
if det(x1`*(w#x1#wt1))=0 then b=j(ncol(x),1,0);
else
b=inv(x1`*(w#x1#wt1))*x1`*(w#y1#wt1);
%IF %UPCASE(&METHOD)=FIXED_G or %UPCASE(&METHOD)=FIXED_BSQ or %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
	yhat[i]=x[i,]*b;
	end;
CV1=((y-yhat)#wt)`*(y-yhat);
%END;
%ELSE %IF %UPCASE(&METHOD)=ADAPTIVEN %THEN %DO;
	yhat[1]=x[i,]*b;
	CV1=((y[i]-yhat)#wt)`*(y[i]-yhat);
%END;
free dist w;
finish cv1;
