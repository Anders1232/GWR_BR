/************** macro for stationarity test *************/

%macro stationarity(DATA=,YVAR=,XVAR=,WEIGHT=,DCOORD=,MAXV=,METHOD=,DISTANCEKM=NO,H=,REP=99);
proc iml;
use &DATA;
read all var {&YVAR} into y;
read all var {&XVAR} into x;
n=nrow(y);
wt=j(n,1,1);
%IF &WEIGHT NE %THEN %DO;
read all var {&WEIGHT} into wt;
%END;
close &DATA;

%IF %UPCASE(&METHOD)=ADAPTIVEN %THEN %DO;
	use &DHV;read all into hv;
%END;
x=j(n,1,1)||x;

%IF &H NE %THEN %DO;
	h=&H;
	print h[label="Bandwidth"];
%END;
%ELSE %DO;
	%IF %UPCASE(&METHOD)=FIXED_G or %UPCASE(&METHOD)=FIXED_BSQ or %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
		h=&_h_;
		print h[label="Bandwidth"];
	%END;
%END;

use &DCOORD;															     
read all var{x y} into COORD;														     
	read all var{x y} into POINTS;     
close &DCOORD;
m=nrow(POINTS);

bi=j(ncol(x)*m,4,0);
biT=j(m,ncol(x)+1,0);
ym=y-y[:];

*** Basic formulae for calculating spherical distance *** ;
do r=1 to &REP;
do i=1 to m;
free dist;
	d=j(1,3,0);
	do j=1 to n;															 
	%IF %UPCASE(&DISTANCEKM)=YES %THEN %DO;
		dif=abs(POINTS[i,1]-COORD[j,1]);   
		raio=arcos(-1)/180; 
		argument=sin(POINTS[i,2]*raio)*sin(COORD[j,2]*raio)+cos(POINTS[i,2]*raio)*cos(COORD[j,2]*raio)*cos(dif*raio);
		if argument>1 then arco=0;
		else
		/* Law of Cosines */ 
		arco=arcos(sin(POINTS[i,2]*raio)*sin(COORD[j,2]*raio)+cos(POINTS[i,2]*raio)*cos(COORD[j,2]*raio)*cos(dif*raio));
		d1=arco*6371 /*Earth's Radius = 6371 (aproximately)*/;
		if d1<=1e-3 then d1=0;
	%END;
	%ELSE %DO;
		d1=sqrt((POINTS[i,1]-COORD[j,1])**2+(POINTS[i,2]-COORD[j,2])**2);
	%END;
%IF %UPCASE(&METHOD)=FIXED_G %THEN %DO;
		if d1<=&MAXV*1 & d1 ^=0 then do;
%END;
%ELSE %IF %UPCASE(&METHOD)=FIXED_BSQ %THEN %DO;
		if d1<=h & d1 ^=0 then do;
%END;
%ELSE %IF %UPCASE(&METHOD)=ADAPTIVEN %THEN %DO;
		if d1<=hv[i] & d1 ^=0 then do;
%END;
%ELSE %IF %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
		if d1 ^=0 then do;
%END;
			d[1]=i; 
			d[2]=j;
	%IF %UPCASE(&DISTANCEKM)=YES %THEN %DO;
		d[3]=arco*6371 /*Earth's Radius = 6371 (approximately)*/;   
	%END;
	%ELSE %DO;
		d[3]=sqrt((POINTS[i,1]-COORD[j,1])**2+(POINTS[i,2]-COORD[j,2])**2);
	%END;
			dist=dist//d;
		end;
	end;
	u=nrow(dist);
	w=j(u,1,0);
	x1=x[i,];
	y1=y[i,];
	wt1=wt[i,];
	ym1=ym[i,];
	do jj=1 to u;
%IF %UPCASE(&METHOD)=FIXED_G %THEN %DO;
		w[jj]=exp(-(dist[jj,3]/h)**2);
%END;
%ELSE %IF %UPCASE(&METHOD)=FIXED_BSQ %THEN %DO;
		w[jj]=(1-(dist[jj,3]/h)**2)**2;
%END;
%ELSE %IF %UPCASE(&METHOD)=ADAPTIVEN %THEN %DO;
		w[jj]=(1-(dist[jj,3]/hv[i])**2)**2;
%END;
		x1=x1//x[dist[jj,2],];
		y1=y1//y[dist[jj,2],];
		wt1=wt1//wt[dist[jj,2],];
		ym1=ym1//ym[dist[jj,2],];
	end;
	w={1}//w;
	%IF %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
	x1=x[i,];
	y1=y[i,];
	wt1=wt[i,];
	ym1=ym[i,];
	call sort(dist,{3});
	dist=dist||(1:nrow(dist))`;
	w=j(n,2,0);	
	hn=dist[h,3];
	do jj=1 to n-1;
		 if dist[jj,4]<=h then
		w[jj,1]=(1-(dist[jj,3]/hn)**2)**2;
		else w[jj,1]=0;
		w[jj,2]=dist[jj,2];
	end;
	position=w[loc(w[,1]>0),2];
	w={1}//w[position,1];
	x1=x1//x[position,];
	y1=y1//y[position,];
	wt1=wt1//wt[position,];
	ym1=ym1//ym[position,];
	%END;
       
	if det(x1`*(w#x1#wt1))=0 then b=j(ncol(x),1,0);
	else
	b=inv(x1`*(w#x1#wt1))*x1`*(w#y1#wt1);

	/*******************************/
	m1=(i-1)*ncol(x)+1;
	m2=m1+(ncol(x)-1);
	bi[m1:m2,1]=i;
	bi[m1:m2,2]=b;
	bi[m1:m2,3]=POINTS[i,1];
	bi[m1:m2,4]=POINTS[i,2];
end;
_beta_=shape(bi[,1:2],n);
i=do(2,ncol(_beta_),2);
_beta_=_beta_[,i];

do i=1 to ncol(_beta_);
vk=(_beta_[,i]-_beta_[:,i])`*(_beta_[,i]-_beta_[:,i])/n;
vr=vr||vk;
end;
if r=1 then v=vr;else v=v//vr;
    ru = 1:n;
	*call randseed(r);
    call randgen(ru, "Uniform");
	y=ru`||y;
	x=ru`||x;
    call sort(y,{1});
	call sort(x,{1});
	y=y[,2];
	x=x[,2:ncol(x)];
	ym=y-y[:];
	free vr vk;
end;

pvalor=j(1,ncol(v),0);
do var=1 to ncol(v);
do i=1 to nrow(v);
if v[i,var]>=v[1,var] then pvalor[var]=pvalor[var]+1;
end;
end;
pvalor=pvalor/nrow(v);
_colname_={"Intercept" &xvar};
print pvalor[label="Nonstationarity test (p-value)" colname=_colname_];

create _stationarity_ from v[colname=_colname_];
append from v;
quit;
%mend stationarity;

