/* Calculating VIF */
if ncol(x)>2 then do;
do v=2 to ncol(x);
		if v=2 then do;
				yvif=x1[,v];
				xvif=x1[,v+1:ncol(x)];
				xv=x[,v+1:ncol(x)];
		end;
		else if v=ncol(x) then do;
				yvif=x1[,v];
				xvif=x1[,2:v-1];
				xv=x[,2:v-1];
		end;
	else do;
			yvif=x1[,v];
				xvif=x1[,2:v-1]||x1[,v+1:ncol(x)];
				xv=x[,2:v-1]||x[,v+1:ncol(x)];
		end;
if det(xvif`*(w#xvif))=0 then bvif=j(ncol(xvif),1,0);
else
bvif=inv(xvif`*(w#xvif))*xvif`*(w#yvif);
yhatvi=xv*bvif;
yhatvi1=yhatvi[i,];
ymvif=x1[,v]-x1[:,v];
%IF %UPCASE(&METHOD)=ADAPTIVE_BSQ %THEN %DO;
				ymvif1=ymvif;
%END;
%ELSE %DO;
ymvif=x[,v]-x[:,v];
ymvif1=ymvif[i,];
do jj=1 to u;
		ymvif1=ymvif1//ymvif[dist[jj,2],];
		yhatvi1=yhatvi1//yhatvi[dist[jj,2],];
end;
%END;
TSS=ymvif1`*(w#ymvif1);
RSS=(yvif-yhatvi1)`*(w#(yvif-yhatvi1));
vif[i,v-1]=1/(1-(TSS-RSS)/TSS);
end;
end;
else do;
vif=repeat(1,n);
end;
/**********END VIF ************/
if i=1 then W_f=W||(1:nrow(w))`;else W_f=W_f//(W||(1:nrow(w))`);
end;
create w_f from W_f;append from W_f;close w_f;free w_f;
%if &grid= %then %do;

/***** incorporating survey design **************/
v1=sum(S);
*v11=sum(S);
*v2=sum(S2);
*v1=2*v11-v2;
tab=y||x||wt;
e=(y-yhat)#wt;
e2=e#x;

if nh>0 & ni>0 then do;
_h_=j(nrow(sh),1,0);
_h_[1]=1;
_i_=j(nrow(ci),1,0);
_i_[1]=1;
do k=2 to nrow(sh);
if sh[k]=sh[k-1] then _h_[k]=_h_[k-1];
else _h_[k]=_h_[k-1]+1;
if ci[k]=ci[k-1] then _i_[k]=_i_[k-1];
else _i_[k]=_i_[k-1]+1;
end;
tab=tab||_h_||_i_;
 ehi=j(1,ncol(x)+4,1);
 ehi[1,3:2+ncol(x)]=e2[1,];
 ehi[1]=tab[1,ncol(tab)-1];ehi[2]=tab[1,ncol(tab)];ehi[ncol(ehi)-1]=fh[1];
 do j=2 to nrow(tab);
  if tab[j,ncol(tab)-1]=tab[j-1,ncol(tab)-1] & tab[j,ncol(tab)]=tab[j-1,ncol(tab)] then do;ehi[nrow(ehi),3:2+ncol(x)]=ehi[nrow(ehi),3:2+ncol(x)]+e2[j,];ehi[nrow(ehi),ncol(ehi)]=ehi[nrow(ehi),ncol(ehi)]+1;ehi[nrow(ehi),ncol(ehi)-1]=(ehi[nrow(ehi),ncol(ehi)-1]+fh[j])/2;end;
  else ehi=ehi//(tab[j,ncol(tab)-1]||tab[j,ncol(tab)]||e2[j,]||fh[j]||j(1,1,1));
 end;
 ee=ehi[,ncol(ehi)-1:ncol(ehi)];
 ehi=ehi[,1:ncol(ehi)-2]||j(nrow(ehi),3+ncol(x),0);ehi[1,3+ncol(x):2+2*ncol(x)]=ehi[1,3:2+ncol(x)];ehi[,ncol(ehi)-2:ncol(ehi)-1]=ee;ehi[1,ncol(ehi)]=ehi[1,ncol(ehi)-1];
 count=0;
 do j=2 to nrow(ehi);
  if ehi[j,1]=ehi[j-1,1] then do;ehi[j,3+ncol(x):2+2*ncol(x)]=ehi[j-1,3+ncol(x):2+2*ncol(x)]+ehi[j,3:2+ncol(x)];count=count+1;ehi[j,ncol(ehi)]=ehi[j-1,ncol(ehi)]+ehi[j,ncol(ehi)-1];ehi[j,ncol(ehi)-2]=ehi[j-1,ncol(ehi)-2];end;
  else do;
   if ehi[j-1,1]=1 then do;ehi[1:count+1,ncol(ehi)-1]=count+1;ehi[1:count+1,3+ncol(x):2+2*ncol(x)]=repeat(ehi[j-1,3+ncol(x):2+2*ncol(x)]/ehi[j-1,ncol(ehi)-1],count+1);in=ehi[j,2];ehi[1:count+1,ncol(ehi)]=repeat(ehi[j-1,ncol(ehi)],count+1);end;
   else do;ehi[in:in+count,ncol(ehi)-1]=count+1;ehi[in:in+count,3+ncol(x):2+2*ncol(x)]=repeat(ehi[j-1,3+ncol(x):2+2*ncol(x)]/ehi[j-1,ncol(ehi)-1],count+1);ehi[in:in+count,ncol(ehi)]=repeat(ehi[j-1,ncol(ehi)],count+1);in=ehi[j,2];end;
   ehi[j,3+ncol(x):2+2*ncol(x)]=ehi[j,3:2+ncol(x)];ehi[j,ncol(ehi)]=ehi[j,ncol(ehi)-1];count=0;
  end;
  if j=nrow(ehi) then do;
   ehi[in:in+count,ncol(ehi)-1]=count+1;ehi[in:in+count,3+ncol(x):2+2*ncol(x)]=repeat(ehi[j,3+ncol(x):2+2*ncol(x)]/ehi[j,ncol(ehi)-1],count+1);ehi[in:in+count,ncol(ehi)]=repeat(ehi[j,ncol(ehi)],count+1);in=ehi[j,2];
  end;
 end;
print 'Design Summary',,'Number of Strata' (ehi[nrow(ehi),1]), 'Number of Clusters' (ehi[nrow(ehi),2]);
*print ehi;
do jj=1 to nrow(ehi);if ehi[jj,ncol(ehi)-1]=1 then do;ehi[jj,ncol(ehi)-1]=2;ehi[jj,3:2+ncol(x)]=0;ehi[jj,3+ncol(x):2+2*ncol(x)]=0;end;end;
G=((n-1)/(n-v1))*(((ehi[,ncol(ehi)-1]/(ehi[,ncol(ehi)-1]-1))#(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]))`*(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]));
%IF &FPC NE %THEN %DO;
G=((n-1)/(n-v1))*((((ehi[,ncol(ehi)-1]#(1-ehi[,ncol(ehi)-2]))/(ehi[,ncol(ehi)-1]-1))#(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]))`*(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]));
%END;
gl=ni-nh;
print g;
end;

else if nh>0 & ni=0 then do;
_h_=j(nrow(sh),1,0);
_h_[1]=1;
do k=2 to nrow(sh);
if sh[k]=sh[k-1] then _h_[k]=_h_[k-1];
else _h_[k]=_h_[k-1]+1;
end;
tab=tab||_h_;
ehi=j(1,2*ncol(x)+3,0);
 ehi[1,2:1+ncol(x)]=e2[1,];
 ehi[1]=tab[1,ncol(tab)];ehi[ncol(ehi)-1]=fh[1];ehi[ncol(ehi)]=1;
 do j=2 to nrow(tab);
  if tab[j,ncol(tab)]=tab[j-1,ncol(tab)] then do;ehi[nrow(ehi),2:1+ncol(x)]=ehi[nrow(ehi),2:1+ncol(x)]+e2[j,];ehi[nrow(ehi),ncol(ehi)-1]=ehi[nrow(ehi),ncol(ehi)-1];ehi[nrow(ehi),ncol(ehi)]=ehi[nrow(ehi),ncol(ehi)]+1;end;
  else do;ehi=ehi//(tab[j,ncol(tab)]||e2[j,]||j(1,ncol(x),1)||fh[j]||j(1,1,1));end;
 end;
 ehi[,2+ncol(x):1+2*ncol(x)]=ehi[,2:1+ncol(x)]/ehi[,ncol(ehi)];
do jj=1 to nrow(ehi);
ehi2=ehi2//repeat(ehi[jj,2+ncol(x):3+2*ncol(x)],ehi[jj,ncol(ehi)]);
end;
eh=e2||ehi2[,1:ncol(ehi2)-1]||ehi2[,ncol(ehi2)];
print 'Design Summary',,'Number of Strata' (ehi[<>,1]);
*print eh;
do jj=1 to nrow(eh);if eh[jj,ncol(eh)]=1 then eh[jj,ncol(eh)]=2;end;
G=((n-1)/(n-v1))*(((eh[,ncol(eh)]/(eh[,ncol(eh)]-1))#(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]))`*(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]));
%IF &FPC NE %THEN %DO;
G=((n-1)/(n-v1))*((((eh[,ncol(eh)]#(1-eh[,ncol(eh)-1]))/(eh[,ncol(eh)]-1))#(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]))`*(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]));
%END;
gl=nh-1;
print g;
end;

else if ni>0 & nh=0 then do;
_i_=j(nrow(ci),1,0);
_i_[1]=1;
do k=2 to nrow(ci);
if ci[k]=ci[k-1] then _i_[k]=_i_[k-1];
else _i_[k]=_i_[k-1]+1;
end;
tab=tab||_i_;
ei=j(1,ncol(x)+3,0);
 ei[1,2:1+ncol(x)]=e2[1,];
 ei[1]=tab[1,ncol(tab)];ei[ncol(ei)]=fh[1];ei[1,ncol(ei)]=1;
 do j=2 to nrow(tab);
  if tab[j,ncol(tab)]=tab[j-1,ncol(tab)] then do;ei[nrow(ei),2:1+ncol(x)]=ei[nrow(ei),2:1+ncol(x)]+e2[j,];ei[nrow(ei),ncol(ei)]=(ei[nrow(ei),ncol(ei)]+fh[j])/2;ei[nrow(ei),ncol(ei)]=ei[nrow(ei),ncol(ei)]+1;end;
  else ei=ei//(tab[j,ncol(tab)]||e2[j,]||fh[j]||j(1,1,1));
 end;
print 'Design Summary',,'Number of Clusters' (ei[<>,1]);
*print ei;
G=((n-1)/(n-v1))*(ei[<>,1]/(ei[<>,1]-1))*((ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)])`*(ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)]));
%IF &FPC NE %THEN %DO;
G=((n-1)/(n-v1))*((((ei[<>,1]#(1-ei[,ncol(ei)-1]))/(ei[<>,1]-1))#(ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)]))`*(ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)]));
%END;
gl=ni-1;
print G;
end;

else do;
G=(n-1)/(n-v1)*(n/(n-1))*((e2-e2[:,])`*(e2-e2[:,]));
gl=n-v1;
*print g;
end;
create _Gmatrix_ from G;append from G;close _Gmatrix_;
/***********************************************/
v1=sum(S);
*v11=sum(S);
*v2=sum(S2);
*v1=2*v11-v2;
res=(y-yhat);
rsqr1=(res#wt)`*res;
ym=(y#wt)`*y;
rsqr2=ym-((y#wt)[+]**2)/wt[+];
rsqr=1-rsqr1/rsqr2;
rsqradj=1-((n-1)/(n-v1))*(1-rsqr);
sigma2=n*rsqr1/((n-v1)*wt[+]);
root_mse=sqrt(sigma2);
print sigma2[label='Sigma2e'] root_mse[label='Root MSE'] v1[label='#GWR parameters'] /*v11[label='#GWR parameters (model)'] v2[label='#GWR parameters (variance)']*/;
influence=S;
resstd=res/(sqrt(sigma2)*sqrt(abs(1-influence)));
CooksD=resstd#resstd#influence/(v1*(1-influence));
varbi=varbi*sigma2;
/*** standard GWR variance ****/
sigma2gg=rsqr1/(n-v1);
varbigg=varbigg*sigma2gg;
%IF &FPC NE %THEN %DO;
varbigg=varbigg*(1-n/wt[+]);
%END;
/******************************/
if ni>0 | nh>0 | wt[+] ^= n then do;
do i=1 to m;
m1=(i-1)*ncol(x)+1;
m2=m1+(ncol(x)-1);
varbi[m1:m2,1]=vecdiag(varbis[m1:m2,]*G*varbis[m1:m2,]);
end;
end;
deffgwr=varbi/varbigg;
stdbi=sqrt(varbi);
tstat = bi[,2]/stdbi;
probt=2*(1-probt(abs(tstat),gl));
_malpha_=0.05*(ncol(x)/v1);
_t_critical_=abs(tinv(_malpha_/2,gl));
print rsqr[format=comma6.4 label="R-Square"] rsqradj[format=comma6.4 label="Adj-R-Square"];
lnlcl=-n*log(rsqr1/n)/2-n*log(2*arcos(-1))/2-sum((y-yhat)#(y-yhat))/(2*(rsqr1/n));
AIC=2*v1-2*lnlcl+((n+v1)/(n-2-v1));
*AIC=2*n*log(rsqr1/n)+n*log(2*arcos(-1))+n*((n+v1)/(n-2-v1));
print AIC lnlcl;
_beta_=shape(bi[,1:2],n);
i=do(2,ncol(_beta_),2);
_beta_=_beta_[,i];
call qntl(qntl,_beta_);
qntl=qntl//(qntl[3,]-qntl[1,]);
descriptb=_beta_[:,]//_beta_[><,]//_beta_[<>,];

print qntl[label="Quantiles of GWR Parameter Estimates"
rowname={"P25", "P50", "P75", "IQR"} colname={'Intercept' &xvar}],,
descriptb[label="Descriptive Statistics" rowname={"Mean", "Min", "Max"}
colname={'Intercept' &xvar}];

_stdbeta_=shape(stdbi,n);
call qntl(qntls,_stdbeta_);
qntls=qntls//(qntls[3,]-qntls[1,]);
descripts=_stdbeta_[:,]//_stdbeta_[><,]//_stdbeta_[<>,];

print _malpha_[label="alpha-level=0.05"] _t_critical_[format=comma6.2 label="t-Critical"] gl;
print qntls[label="Quantiles of GWR Standard Errors"
rowname={"P25", "P50", "P75", "IQR"} colname={'Intercept' &xvar}],,
descripts[label="Descriptive Statistics of Standard Errors" rowname={"Mean", "Min", "Max"}
colname={'Intercept' &xvar}];

_deffgwr_=shape(deffgwr,n);
call qntl(qntldeff,_deffgwr_);
descriptdeff=_deffgwr_[:,]//_deffgwr_[><,]//_deffgwr_[<>,];

print qntldeff[label="Quantiles of GWR Deff"
rowname={"P25", "P50", "P75"} colname={'Intercept' &xvar}],,
descriptdeff[label="Descriptive Statistics of GWR Deff" rowname={"Mean", "Min", "Max"}
colname={'Intercept' &xvar}];
%end;
*print bi stdbi tstat probt influence cooksD;
/****** Non-Stationarity Test *****************/
%IF %UPCASE(&METHOD) ne ADAPTIVE_BSQ %THEN %DO;
BBk=j(n,n,0);
Vk=j(ncol(x),1,0);
gl1k=j(ncol(x),1,0);
gl2k=j(ncol(x),1,0);
do k=1 to ncol(x);
ek=j(ncol(x),1,0);
ek[k]=1;
do i=1 to n;
m1=(i-1)*ncol(x)+1;
m2=m1+(ncol(x)-1);
BBk[i,]=ek`*BB[m1:m2,];
end;
Vk[k]=y`*(1/n)*BBk`*(I(n)-(1/n)*J(n,n,1))*BBk*y;
gl1k[k]=trace((1/n)*BBk`*(I(n)-(1/n)*J(n,n,1))*BBk);
gl2k[k]=trace(((1/n)*BBk`*(I(n)-(1/n)*J(n,n,1))*BBk)**2);
end;
Fk=(Vk/gl1k)/sigma2;
ndf=gl1k##2/gl2k;
ddf=n-v1;
ddf=repeat(ddf,ncol(x));
probf=1-probf(Fk,ndf,ddf);
print ,,"Non-Stationarity Test (Leung et al., 2000)",,
Vk[label='' rowname={'Intercept' &xvar} colname={"V"}] Fk[label=''  colname={"F"}] ndf ddf
probf[format=pvalue6. label="Pr > F"];
%END;

/***** global estimates ***************/
bg=inv(x`*(x#wt))*x`*(y#wt);
s2g=((y-x*bg)#wt)`*(y-x*bg)/(n-nrow(bg));
varg=vecdiag(inv(x`*(x#wt))*s2g);
%IF &FPC NE %THEN %DO;
varg=vecdiag(inv(x`*(x#wt))*s2g)*(1-n/wt[+]);
%end;
/***** incorporating survey design **************/
tab=y||x||wt;
eg=(y-x*bg)#wt;
e2g=eg#x;

if nh>0 & ni>0 then do;
_h_=j(nrow(sh),1,0);
_h_[1]=1;
_i_=j(nrow(ci),1,0);
_i_[1]=1;
do k=2 to nrow(sh);
if sh[k]=sh[k-1] then _h_[k]=_h_[k-1];
else _h_[k]=_h_[k-1]+1;
if ci[k]=ci[k-1] then _i_[k]=_i_[k-1];
else _i_[k]=_i_[k-1]+1;
end;
tab=tab||_h_||_i_;
 ehi=j(1,ncol(x)+4,1);
 ehi[1,3:2+ncol(x)]=e2g[1,];
 ehi[1]=tab[1,ncol(tab)-1];ehi[2]=tab[1,ncol(tab)];ehi[ncol(ehi)-1]=fh[1];
 do j=2 to nrow(tab);
  if tab[j,ncol(tab)-1]=tab[j-1,ncol(tab)-1] & tab[j,ncol(tab)]=tab[j-1,ncol(tab)] then do;ehi[nrow(ehi),3:2+ncol(x)]=ehi[nrow(ehi),3:2+ncol(x)]+e2g[j,];ehi[nrow(ehi),ncol(ehi)]=ehi[nrow(ehi),ncol(ehi)]+1;ehi[nrow(ehi),ncol(ehi)-1]=(ehi[nrow(ehi),ncol(ehi)-1]+fh[j])/2;end;
  else ehi=ehi//(tab[j,ncol(tab)-1]||tab[j,ncol(tab)]||e2g[j,]||fh[j]||j(1,1,1));
 end;
 ee=ehi[,ncol(ehi)-1:ncol(ehi)];
 ehi=ehi[,1:ncol(ehi)-2]||j(nrow(ehi),3+ncol(x),0);ehi[1,3+ncol(x):2+2*ncol(x)]=ehi[1,3:2+ncol(x)];ehi[,ncol(ehi)-2:ncol(ehi)-1]=ee;ehi[1,ncol(ehi)]=ehi[1,ncol(ehi)-1];
 count=0;
 do j=2 to nrow(ehi);
  if ehi[j,1]=ehi[j-1,1] then do;ehi[j,3+ncol(x):2+2*ncol(x)]=ehi[j-1,3+ncol(x):2+2*ncol(x)]+ehi[j,3:2+ncol(x)];count=count+1;ehi[j,ncol(ehi)]=ehi[j-1,ncol(ehi)]+ehi[j,ncol(ehi)-1];ehi[j,ncol(ehi)-2]=ehi[j-1,ncol(ehi)-2];end;
  else do;
   if ehi[j-1,1]=1 then do;ehi[1:count+1,ncol(ehi)-1]=count+1;ehi[1:count+1,3+ncol(x):2+2*ncol(x)]=repeat(ehi[j-1,3+ncol(x):2+2*ncol(x)]/ehi[j-1,ncol(ehi)-1],count+1);in=ehi[j,2];ehi[1:count+1,ncol(ehi)]=repeat(ehi[j-1,ncol(ehi)],count+1);end;
   else do;ehi[in:in+count,ncol(ehi)-1]=count+1;ehi[in:in+count,3+ncol(x):2+2*ncol(x)]=repeat(ehi[j-1,3+ncol(x):2+2*ncol(x)]/ehi[j-1,ncol(ehi)-1],count+1);ehi[in:in+count,ncol(ehi)]=repeat(ehi[j-1,ncol(ehi)],count+1);in=ehi[j,2];end;
   ehi[j,3+ncol(x):2+2*ncol(x)]=ehi[j,3:2+ncol(x)];ehi[j,ncol(ehi)]=ehi[j,ncol(ehi)-1];count=0;
  end;
  if j=nrow(ehi) then do;
   ehi[in:in+count,ncol(ehi)-1]=count+1;ehi[in:in+count,3+ncol(x):2+2*ncol(x)]=repeat(ehi[j,3+ncol(x):2+2*ncol(x)]/ehi[j,ncol(ehi)-1],count+1);ehi[in:in+count,ncol(ehi)]=repeat(ehi[j,ncol(ehi)],count+1);in=ehi[j,2];
  end;
 end;
*print ehi;
do jj=1 to nrow(ehi);if ehi[jj,ncol(ehi)-1]=1 then do;ehi[jj,ncol(ehi)-1]=2;ehi[jj,3:2+ncol(x)]=0;ehi[jj,3+ncol(x):2+2*ncol(x)]=0;end;end;
Gg=((n-1)/(n-ncol(x)))*(((ehi[,ncol(ehi)-1]/(ehi[,ncol(ehi)-1]-1))#(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]))`*(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]));
%IF &FPC NE %THEN %DO;
Gg=((n-1)/(n-ncol(x)))*((((ehi[,ncol(ehi)-1]#(1-ehi[,ncol(ehi)-2]))/(ehi[,ncol(ehi)-1]-1))#(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]))`*(ehi[,3:2+ncol(x)]-ehi[,3+ncol(x):2+2*ncol(x)]));
%END;
glg=ni-nh;
end;

else if nh>0 & ni=0 then do;
_h_=j(nrow(sh),1,0);
_h_[1]=1;
do k=2 to nrow(sh);
if sh[k]=sh[k-1] then _h_[k]=_h_[k-1];
else _h_[k]=_h_[k-1]+1;
end;
tab=tab||_h_;
ehi=j(1,2*ncol(x)+3,0);
 ehi[1,2:1+ncol(x)]=e2g[1,];
 ehi[1]=tab[1,ncol(tab)];ehi[ncol(ehi)-1]=fh[1];ehi[ncol(ehi)]=1;
 do j=2 to nrow(tab);
  if tab[j,ncol(tab)]=tab[j-1,ncol(tab)] then do;ehi[nrow(ehi),2:1+ncol(x)]=ehi[nrow(ehi),2:1+ncol(x)]+e2g[j,];ehi[nrow(ehi),ncol(ehi)-1]=ehi[nrow(ehi),ncol(ehi)-1];ehi[nrow(ehi),ncol(ehi)]=ehi[nrow(ehi),ncol(ehi)]+1;end;
  else do;ehi=ehi//(tab[j,ncol(tab)]||e2g[j,]||j(1,ncol(x),1)||fh[j]||j(1,1,1));end;
 end;
 ehi[,2+ncol(x):1+2*ncol(x)]=ehi[,2:1+ncol(x)]/ehi[,ncol(ehi)];
do jj=1 to nrow(ehi);
ehi2=ehi2//repeat(ehi[jj,2+ncol(x):3+2*ncol(x)],ehi[jj,ncol(ehi)]);
end;
eh=e2g||ehi2[,1:ncol(ehi2)-1]||ehi2[,ncol(ehi2)];
do jj=1 to nrow(eh);if eh[jj,ncol(eh)]=1 then eh[jj,ncol(eh)]=2;end;
Gg=((n-1)/(n-ncol(x)))*(((eh[,ncol(eh)]/(eh[,ncol(eh)]-1))#(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]))`*(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]));
%IF &FPC NE %THEN %DO;
Gg=((n-1)/(n-ncol(x)))*((((eh[,ncol(eh)]#(1-eh[,ncol(eh)-1]))/(eh[,ncol(eh)]-1))#(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]))`*(eh[,1:ncol(x)]-eh[,1+ncol(x):2*ncol(x)]));
%END;
glg=nh-1;
end;

else if ni>0 & nh=0 then do;
_i_=j(nrow(ci),1,0);
_i_[1]=1;
do k=2 to nrow(ci);
if ci[k]=ci[k-1] then _i_[k]=_i_[k-1];
else _i_[k]=_i_[k-1]+1;
end;
tab=tab||_i_;
ei=j(1,ncol(x)+3,0);
 ei[1,2:1+ncol(x)]=e2g[1,];
 ei[1]=tab[1,ncol(tab)];ei[ncol(ei)]=fh[1];ei[1,ncol(ei)]=1;
 do j=2 to nrow(tab);
  if tab[j,ncol(tab)]=tab[j-1,ncol(tab)] then do;ei[nrow(ei),2:1+ncol(x)]=ei[nrow(ei),2:1+ncol(x)]+e2[j,];ei[nrow(ei),ncol(ei)]=(ei[nrow(ei),ncol(ei)]+fh[j])/2;ei[nrow(ei),ncol(ei)]=ei[nrow(ei),ncol(ei)]+1;end;
  else ei=ei//(tab[j,ncol(tab)]||e2g[j,]||fh[j]||j(1,1,1));
 end;
Gg=((n-1)/(n-ncol(x)))*(ei[<>,1]/(ei[<>,1]-1))*((ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)])`*(ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)]));
%IF &FPC NE %THEN %DO;
Gg=((n-1)/(n-ncol(x)))*((((ei[<>,1]#(1-ei[,ncol(ei)-1]))/(ei[<>,1]-1))#(ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)]))`*(ei[,2:1+ncol(x)]-ei[+,2:1+ncol(x)]/ei[+,ncol(ei)]));
%END;
glg=ni-1;
end;

else do;
Gg=(n-1)/(n-ncol(x))*(n/(n-1))*((e2g-e2g[:,])`*(e2g-e2g[:,]));
glg=n-1;
end;

vargd=vecdiag(inv(x`*(x#wt))*Gg*inv(x`*(x#wt)));
%IF &WEIGHT = %THEN %DO;
vargd=varg;
glg=n-ncol(x);
%END;
deff=vargd/varg;
stdg=sqrt(vargd);
tg=bg/stdg;
probtg=2*(1-probt(abs(tg),glg));
bg_stdg=bg||stdg;
print "Global Parameter Estimates",,bg_stdg[label=' ' rowname={'Intercept' &xvar}
colname={"Par. Est." "Std Error"}] tg[format=comma6.2 label="t Value"] probtg[format=pvalue6. label="Pr > |t|"]
deff[format=comma6.2 label="Deff"],,
"NOTE: The denominator degrees of freedom for the t tests is" glg[label=' ']".";
resg=(y-x*bg);
rsqr1g=(resg#wt)`*resg;
ymg=(y#wt)`*y;
rsqr2g=ymg-((y#wt)[+]**2)/wt[+];
rsqrg=1-rsqr1g/rsqr2g;
rsqradjg=1-((n-1)/(n-ncol(x)))*(1-rsqrg);
sigma2g=n*rsqr1g/((n-ncol(x))*wt[+]);
root_mseg=sqrt(sigma2g);
print sigma2g[label='Sigma2e'] root_mseg[label='Root MSE'];
print rsqrg[format=comma6.4 label="R-Square"] rsqradjg[format=comma6.4 label="Adj-R-Square"];

/****************************************/
%if &grid= %then %do;
create _res_ var{wt y yhat res resstd rsqri influence cooksD sumwi};
append;
create _beta_ from bi[colname={"id" "B"}];
append from bi;
bistdt=bi||stdbi||tstat||probt||deffgwr;
create _parameters_ from bistdt[colname={"id" "B" "x" "y" "stdbi" "tstat" "probt" "GWRDeff"}];
append from bistdt;
_tstat_=_beta_/_stdbeta_;
_probt_=2*(1-probt(abs(_tstat_),gl));
_sig_=j(n,ncol(x),"not significant at 90%");
v1=sum(S);
do i=1 to n;
do j=1 to ncol(x);
if _probt_[i,j]<0.01*(ncol(x)/v1) then _sig_[i,j]="significant at 99%";
else if _probt_[i,j]<0.05*(ncol(x)/v1) then _sig_[i,j]="significant at 95%";
else if _probt_[i,j]<0.1*(ncol(x)/v1) then _sig_[i,j]="significant at 90%";
else _sig_[i,j]="not significant at 90%";
end;
end;
_bistdt_=COORD||_beta_||_stdbeta_||_tstat_||_probt_||_deffgwr_;
_colname1_={"Intercept" &xvar};
_label_=repeat("std_",ncol(x))//repeat("tstat_",ncol(x))//repeat("probt_",ncol(x))//repeat("GWRDeff_",ncol(x));
_colname_={"x" "y"}||_colname1_||concat(_label_,repeat(_colname1_`,4))`;
call change(_colname_, "_ ", "_");
call change(_colname_, "_ ", "_");
create _parameters2_ from _bistdt_[colname=_colname_];
append from _bistdt_;
close _parameters2_;
_label_=repeat("sig_",ncol(x));
_colname_=concat(_label_,repeat(_colname1_`,1))`;
create _sig_parameters2_ from _sig_[colname=_colname_];
append from _sig_;
create _vif_ from vif[colname={&xvar}];
append from vif;
%end;
%else %do;
create _beta_ from bi[colname={"id" "B" "x" "y"}];
append from bi;
bistdt=bi||varbi;
create _parameters_ from bistdt[colname={"id" "B" "x" "y" "varbi"}];
append from bistdt;
close _parameters_;
%if &sigma2 ne and &GMATRIX = %then %do;
varbi=varbi*&sigma2;
varbiggg=varbigg*&sigma2*wt[+]/n;
%IF &FPC NE %THEN %DO;
varbiggg=varbiggg*(1-n/wt[+]);
%END;
deffgwr=varbi/varbiggg;
stdbi=sqrt(varbi);
tstat=bi[,2]/stdbi;
do i=1 to nrow(tstat);
if tstat[i]=. then tstat[i]=0;
end;
bistdt=bi||stdbi||tstat||deffgwr;
create _parameters_ from bistdt[colname={"id" "B" "x" "y" "stdbi" "tstat" "GWRDeff"}];
append from bistdt;
close _parameters_;
%end;
%else %if &sigma2 = and &GMATRIX ne %then %do;
use &GMATRIX;read all into G;close &GMATRIX;
if ni>0 | nh>0 then do;
do i=1 to m;
m1=(i-1)*ncol(x)+1;
m2=m1+(ncol(x)-1);
varbi[m1:m2,1]=vecdiag(varbis[m1:m2,]*G*varbis[m1:m2,]);
end;
end;
stdbi=sqrt(varbi);
tstat=bi[,2]/stdbi;
do i=1 to nrow(tstat);
if tstat[i]=. then tstat[i]=0;
end;
bistdt=bi||stdbi||tstat;
create _parameters_ from bistdt[colname={"id" "B" "x" "y" "stdbi" "tstat"}];
append from bistdt;
close _parameters_;
%end;
%else %if &sigma2 ne and &GMATRIX ne %then %do;
use &GMATRIX;read all into G;close &GMATRIX;
if ni>0 | nh>0 then do;
do i=1 to m;
m1=(i-1)*ncol(x)+1;
m2=m1+(ncol(x)-1);
varbi[m1:m2,1]=vecdiag(varbis[m1:m2,]*G*varbis[m1:m2,]);
end;
end;
varbiggg=varbigg*&sigma2*wt[+]/n;
%IF &FPC NE %THEN %DO;
varbiggg=varbiggg*(1-n/wt[+]);
%END;
deffgwr=varbi/varbiggg;
stdbi=sqrt(varbi);
tstat=bi[,2]/stdbi;
do i=1 to nrow(tstat);
if tstat[i]=. then tstat[i]=0;
end;
bistdt=bi||stdbi||tstat||deffgwr;
create _parameters_ from bistdt[colname={"id" "B" "x" "y" "stdbi" "tstat" "GWRDeff"}];
append from bistdt;
close _parameters_;
%end;
%end;
quit;
%mend GWR;

